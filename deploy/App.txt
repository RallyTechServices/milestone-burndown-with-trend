<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Item Burnup With Trend</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Oct 28 2015 14:14:55 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Oct 28 2015 14:14:55 GMT-0700 (PDT)";
        var CHECKSUM = 79700440646;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.Colors", {
        // RGB values obtained from here: http://ux-blog.rallydev.com/?cat=23
        grey4: "#C0C0C0",  // $grey4
        orange: "#FF8200",  // $orange
        gold: "#F6A900",  // $gold
        yellow: "#FAD200",  // $yellow
        lime: "#8DC63F",  // $lime
        green_dk: "#1E7C00",  // $green_dk
        blue_link: "#337EC6",  // $blue_link
        blue: "#005EB8",  // $blue
        purple : "#7832A5",  // $purple,
        pink : "#DA1884",   // $pink,
        grey7 : "#666",

        cumulativeFlowColors : function() {
            return [
                this.grey4, this.orange, this.gold, this.yellow, this.lime, this.green_dk, this.blue_link, this.blue, this.purple, this.pink
            ];
        },

        burnLineColor : function (){ return this.blue; },
        burnColumnColor : function() { return this.lime; }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.DateMixin", {

        dateFormattersHighcharts: [
            {key: "MMM", value: "%b"},
            {key: "MM", value: "%m"},
            {key: "dd", value: "%d"},
            {key: "yyyy", value: "%Y"}
        ],

        dateFormatters: [
            {key: "MMM", value: "M"},
            {key: "MM", value: "m"},
            {key: "dd", value: "d"},
            {key: "yyyy", value: "Y"}
        ],

        
        dateToStringDisplay: function (date) {
            return Ext.Date.format(date, 'm/d/Y');
        },

        dateToString: function (date) {
            return Ext.Date.format(date, 'Y-m-d\\TH:i:s.u\\Z');
        },

        dateStringToObject: function (dateStr) {
            var finalIndex = dateStr.indexOf('T'),
                dateObj;

            if (finalIndex > -1) {
                dateStr = dateStr.slice(0, dateStr.indexOf('T'));
            }

            dateObj = this._splitDateParts(dateStr);

            return new Date(dateObj.year, dateObj.month, dateObj.day);
        },

        _splitDateParts: function (dateStr) {
            if (this._shouldSplitOnDash(dateStr)) {
                return this._objectFromYearFirstDate(dateStr.split('-'));
            }
            else {
                return this._objectFromMonthFirstDate(dateStr.split('/'));
            }
        },

        _objectFromYearFirstDate: function (dateArray) {
            if (dateArray.length !== 3) {
                return { year: 0, month: 0, day: 0 };
            }

            dateArray[1] = (parseInt(dateArray[1], 10) - 1).toString();

            return {
                year: dateArray[0],
                month: dateArray[1],
                day: dateArray[2]
            };
        },

        _objectFromMonthFirstDate: function (dateArray) {
            if (dateArray.length !== 3) {
                return { year: 0, month: 0, day: 0 };
            }

            dateArray[0] = (parseInt(dateArray[0], 10) - 1).toString();

            return {
                month: dateArray[0],
                day: dateArray[1],
                year: dateArray[2]
            };
        },

        _shouldSplitOnDash: function (dateStr) {
            return dateStr.split('-').length === 3;
        }

    });

}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.IntegrationHeaders", {

        keyConverters : {
            name : function() { return 'X-RallyIntegrationName'; },
            vendor : function() { return 'X-RallyIntegrationVendor'; },
            platform : function() { return 'X-RallyIntegrationPlatform'; },
            os : function() { return 'X-RallyIntegrationOS'; },
            version : function() { return 'X-RallyIntegrationVersion'; },
            library : function() { return 'X-RallyIntegrationLibrary'; }
        },

        constructor: function(config) {
            this.headers = {
                name : 'A2 Chart',
                vendor : 'Rally Software'
            };

            Ext.merge(this.headers, config.integrationHeaders || {});
            this.callParent(config);
        },
        withName : function(nm) {
            this.headers.name = nm || this.headers.name;
            return this;
        },
        withVendor : function(v) {
            this.headers.vendor = v || this.headers.vendor;
            return this;
        },
        withPlatform : function(newPlatform) {
            this.headers.platform = newPlatform || this.headers.platform;
            return this;
        },
        withVersion : function(newVersion) {
            this.headers.version = newVersion || this.headers.version;
            return this;
        },
        withOS : function(newOS) {
            this.headers.os = newOS || this.headers.os;
            return this;
        },
        withLibrary : function(newLibrary) {
            this.headers.library = newLibrary || this.headers.library;
            return this;
        },
        applyTo : function(config) {
            config.headers = config.headers || {};
            Ext.merge(config.headers, this.build());
            return config;
        },
        build : function() {
            var h = {};
            for (var k in this.headers) {
                if (this.headers.hasOwnProperty(k)) {
                    if (this.headers[k] === null) { continue; }
                    var key = this._keyConverter(k)(k);
                    h[key] = this.headers[k];
                }
            }
            return h;
        },
        _keyConverter: function(key) {
            if (this.keyConverters.hasOwnProperty(key)) {
                return this.keyConverters[key];
            } else {
                return function(x) {return x;};
            }
        }
    });
}());
(function() {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.RadioGroupSetting", {
        extend: "Ext.form.FieldContainer",

        config: {
            settingName: undefined
        },

        constructor: function(config) {
            this.mergeConfig(config);
            this.callParent(arguments);
        },

        getSetting: function() {
            return this.settingsParent.app.getSetting(this.settingName);
        },

        setRadioValue: function (cmp) {
            this.setRadioToCustomValue(cmp, this.getSetting());
        },

        setRadioToCustomValue: function (cmp, customValue) {
            var value = {};
            value[cmp.name] = customValue;
            cmp.setValue(value);
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.SettingsChangeMixin", {

        sendSettingsChange: function(artifact) {
            if (this.settingsParent) {
                this.settingsParent.sendSettingsChange(artifact, this);
            }
        },

        receiveSettingsChange: function(artifact) {

        }

    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.DataTypePicker", {
        extend: "Rally.apps.charts.settings.RadioGroupSetting",
        alias: "widget.chartdatatypepicker",

        mixins: [
            "Ext.form.field.Field",
            "Rally.apps.charts.settings.SettingsChangeMixin"
        ],

        config: {
            settingName: "chartAggregationType"
        },

        settingsParent: undefined,

        initComponent: function () {
            this.callParent(arguments);
            this.add(this._addRadioGroup());
        },

        _addRadioGroup: function () {
            return {
                xtype: "radiogroup",
                name: this.settingName,
                columns: [160, 100],
                vertical: false,
                items: [
                    { boxLabel: "Story Plan Estimate", name: this.settingName, inputValue: "storypoints", checked: true },
                    { boxLabel: "Story Count", name: this.settingName, inputValue: "storycount" }
                ],
                listeners: {
                    beforerender: this.setRadioValue,
                    scope: this
                }
            };
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.PortfolioDatePicker", {
        extend: "Ext.form.FieldContainer",
        alias: "widget.chartportfoliodatepicker",

        requires: [
            "Rally.ui.DateField"
        ],

        mixins: [
            'Ext.form.field.Field',
            'Rally.apps.charts.DateMixin',
            'Rally.apps.charts.settings.SettingsChangeMixin'
        ],

        layout: {
            type: "hbox"
        },

        items: [
            {
                xtype: "container",
                minWidth: 250,
                items: [
                    {
                        xtype: "label",
                        text: "Start Date",
                        cls: "settingsLabel"
                    },
                    {
                        xtype: "radiogroup",
                        name: "startdate",
                        itemId: "startdategroup",
                        columns: 1,
                        vertical: true,
                        items: [
                            {
                                name: "startdate",
                                itemId: "actualstartdate",
                                boxLabel: "Actual Start Date",
                                baseLabel: "Actual Start Date",
                                inputValue: "actualstartdate"
                            },
                            {
                                name: "startdate",
                                itemId: "plannedstartdate",
                                boxLabel: "Planned Start Date",
                                baseLabel: "Planned Start Date",
                                inputValue: "plannedstartdate"
                            },
                            {
                                xtype: "container",
                                layout: {
                                    type: "hbox"
                                },
                                items: [
                                    {
                                        xtype: "radiofield",
                                        name: "startdate",
                                        itemId: "startdatemanual",
                                        boxLabel: " ",
                                        inputValue: "selecteddate"
                                    },
                                    {
                                        xtype: "rallydatefield",
                                        name: "startdate",
                                        itemId: "startdatefield",
                                        inputValue: "selecteddate"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            },
            {
                xtype: "container",
                minWidth: 250,
                items: [
                    {
                        xtype: "label",
                        text: "End Date",
                        cls: "settingsLabel"
                    },
                    {
                        xtype: "radiogroup",
                        name: "enddate",
                        itemId: "enddategroup",
                        columns: 1,
                        vertical: true,
                        items: [
                            {
                                name: "enddate",
                                itemId: 'today',
                                boxLabel: "Today",
                                inputValue: "today"
                            },
                            {
                                name: "enddate",
                                itemId: "actualenddate",
                                boxLabel: "Actual End Date",
                                baseLabel: "Actual End Date",
                                inputValue: "actualenddate"
                            },
                            {
                                name: "enddate",
                                itemId: "plannedenddate",
                                boxLabel: "Planned End Date",
                                baseLabel: "Planned End Date",
                                inputValue: "plannedenddate"
                            },
                            {
                                xtype: "container",
                                layout: {
                                    type: "hbox"
                                },
                                items: [
                                    {
                                        xtype: "radiofield",
                                        name: "enddate",
                                        itemId: "enddatemanual",
                                        boxLabel: " ",
                                        inputValue: "selecteddate"
                                    },
                                    {
                                        xtype: "rallydatefield",
                                        name: "enddate",
                                        itemId: "enddatefield",
                                        inputValue: "selecteddate"
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ],

        settingsParent: undefined,

        /**
         * @Override from SettingsChangeMixin
         * Updates child components when a new portfolio item is chosen.
         */
        receiveSettingsChange: function (artifact) {
            if (artifact) {
                this._enableRadioGroups();
                this._updateRadioLabel(this.actualStartDate, artifact.ActualStartDate);
                this._updateRadioLabel(this.plannedStartDate, artifact.PlannedStartDate);
                this._updateRadioLabel(this.actualEndDate, artifact.ActualEndDate);
                this._updateRadioLabel(this.plannedEndDate, artifact.PlannedEndDate);
                this._setDefaultValues();
            }
        },

        initComponent: function () {
            this.callParent(arguments);
            this._saveComponentReferences();
            this._setupChangeHandlers();
        },

        beforeRender: function () {
            this._disableRadioGroups();
            this._loadSavedSettingsIntoComponent(this.startDateGroup);
            this._loadSavedSettingsIntoComponent(this.endDateGroup);
        },

        selectCustomDateRadioOption: function (cmp) {
            var value = {};
            value[cmp.name] = "selecteddate";
            this._getDateGroup(cmp.name).setValue(value);
        },

        _setupChangeHandlers: function () {
            this.startDatePicker.on('change', this.selectCustomDateRadioOption, this);
            this.endDatePicker.on('change', this.selectCustomDateRadioOption, this);
        },

        _saveComponentReferences: function () {
            this.actualStartDate = this.down("#actualstartdate");
            this.actualEndDate = this.down("#actualenddate");
            this.plannedStartDate = this.down("#plannedstartdate");
            this.plannedEndDate = this.down("#plannedenddate");
            this.startDateGroup = this.down("#startdategroup");
            this.endDateGroup = this.down("#enddategroup");
            this.startDatePicker = this.down("#startdatefield");
            this.endDatePicker = this.down("#enddatefield");
        },

        _disableRadioGroups: function() {
            this.startDateGroup.disable();
            this.endDateGroup.disable();
        },

        _enableRadioGroups: function () {
            this.startDateGroup.enable();
            this.endDateGroup.enable();
        },

        _loadSavedSettingsIntoComponent: function (component) {
            var settingValue = this._getSettingValue(component.name);
            if ( Ext.isArray(settingValue) ) { settingValue = settingValue.join(','); }
            
            var settingParts = settingValue.split(","),
                selection = settingParts[0],
                date = settingParts[1];

            if (date) {
                this._setSavedDate(component, date);
            }

            this._selectRadio(component, selection);
        },

        _setDefaultValues: function () {
            if (this._dateGroupHasNoSelection(this.startDateGroup) && !this.actualStartDate.disabled) {
                this._selectRadio(this.startDateGroup, "actualstartdate");
            }

            if (this._dateGroupHasNoSelection(this.endDateGroup)) {
                if (!this.actualEndDate.disabled) {
                    this._selectRadio(this.endDateGroup, "actualenddate");
                }
                else {
                    this._selectRadio(this.endDateGroup, "today");
                }
            }
        },

        _dateGroupHasNoSelection: function (dateGroupCmp) {
            return Ext.Object.getSize(dateGroupCmp.getValue()) === 0;
        },

        _selectRadio: function (component, selection) {
            if (selection.length > 0) {
                var componentValue = {};
                componentValue[component.name] = selection;
                component.setValue(componentValue);
            }
        },

        _getSettingValue: function (setting) {
            return this.settingsParent.app.getSetting(setting) || "";
        },

        _getCustomDateForGroup: function (groupName) {
            return ({
                startdate: this.startDatePicker,
                enddate: this.endDatePicker
            })[groupName];
        },

        _getDateGroup: function (groupName) {
            return ({
                startdate: this.startDateGroup,
                enddate: this.endDateGroup
            })[groupName];
        },

        _setSavedDate: function (component, dateString) {
            if (component && dateString && dateString.length > 0) {
                var datePicker = this._getCustomDateForGroup(component.name),
                    date = this.dateStringToObject(dateString);

                datePicker.setValue(date);
            }
        },

        _updateRadioLabel: function (radioComponent, date) {
            var newLabelValue = radioComponent.baseLabel,
                formattedDate = this.dateToStringDisplay(date);

            if (formattedDate) {
                radioComponent.enable();
                newLabelValue += " (" + formattedDate + ")";
            }
            else {
                radioComponent.disable();
                if (this._isActualDateRadioField(radioComponent)) {
                    newLabelValue += ": Not Available";
                }
                else {
                    newLabelValue += ": Not Set";
                }
            }

            radioComponent.boxLabelEl.setHTML(newLabelValue);
        },

        _isActualDateRadioField: function (radioComponent) {
            return radioComponent.getId().indexOf("actual") > -1;
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.PortfolioItemDataTypePicker", {
        extend: "Rally.apps.charts.settings.DataTypePicker",
        alias: "widget.chartportfoliodatatypepicker",

        setRadioValue: function(cmp) {
            this.callParent(arguments);

            if(!this.getValue()) {
                this.setRadioToCustomValue(cmp, "storycount");
            }
        },

        _addRadioGroup: function () {
            return {
                xtype: "container",
                minWidth: 250,
                items: [
                    {
                        xtype: "label",
                        text: "Data Type",
                        cls: "settingsLabel",
                        style: {
                            display: "block",
                            minHeight: "20px"
                        }
                    },
                    {
                        xtype: "radiogroup",
                        name: this.settingName,
                        columns: [100, 150],
                        vertical: false,
                        items: [
                            { boxLabel: "Story Count", name: this.settingName, inputValue: "storycount" },
                            { boxLabel: "Story Plan Estimate", name: this.settingName, inputValue: "storypoints" }
                        ],
                        listeners: {
                            beforerender: this.setRadioValue,
                            scope: this
                        }
                    }
                ]
            };
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.settings.PortfolioItemPicker", {
        extend: "Ext.form.FieldContainer",
        alias: "widget.chartportfolioitempicker",

        settingsParent: undefined,
        requestContext: undefined,

        requires: [
            'Deft.Deferred',
            'Rally.util.Test',
            'Rally.ui.EmptyTextFactory',
            'Rally.ui.dialog.ChooserDialog',
            'Rally.data.wsapi.Store'
        ],

        mixins: [
            'Ext.form.field.Field',
            'Rally.apps.charts.settings.SettingsChangeMixin'
        ],

        emptyText: '<p>No portfolio items match your search criteria.</p>',

        items: [
            {
                xtype: "label",
                text: "Portfolio Item",
                cls: "settingsLabel"
            },
            {
                xtype: "container",
                name: "portfolioItemPicker",
                layout: {
                    type: "hbox"
                },
                items: [
                    {

                        xtype: 'rallybutton',
                        text: 'Choose',
                        itemId: 'portfolioItemButton',
                        cls: 'piButton primary small'
                    },
                    {
                        xtype: 'container',
                        cls: 'piDisplayField',
                        items: [
                            {
                                xtype: 'displayfield',
                                itemId: 'portfolioItemDisplay',
                                value: "&nbsp;"
                            }
                        ]
                    }

                ]
            }
        ],

        initComponent: function () {
            this.callParent(arguments);
            this._addTestClass();
        },

        _addTestClass: function () {
            this.addCls(Rally.util.Test.toBrowserTestCssClass('buttonChooser'));
        },

        beforeRender: function () {
            this._configureButton();
            this._configurePicker();
        },

        _configureButton: function () {
            this.down('#portfolioItemButton').on('click', this._onButtonClick, this);
        },

        _configurePicker: function () {
            this._setValueFromSettings();
            this._setupRequestContext();
            this._loadPortfolioItem();
            this._configureChooser();
        },

        _setupRequestContext: function () {
            this.requestContext = {
                workspace: this.settingsParent.app.context.getWorkspaceRef(),
                project: null
            };
        },

        _setValueFromSettings: function () {
            var newSettingsValue = this.settingsParent.app.getSetting("portfolioItemPicker"),
                oldSettingsValue = this.settingsParent.app.getSetting("buttonchooser");

            if (this._isSettingValid(newSettingsValue)) {
                this.setValue(newSettingsValue);
            } else if (this._isSettingValid(oldSettingsValue)) {
                this.setValue(Ext.JSON.decode(oldSettingsValue).artifact._ref);
            } else {
                this.setValue("&nbsp;");
            }
        },

        _isSettingValid: function (value) {
            return value && value !== "undefined";
        },

        _loadPortfolioItem: function () {
            if (this._isSavedValueValid()) {
                this._createPortfolioItemStore();
            }
        },

        _createPortfolioItemStore: function () {
            Ext.create("Rally.data.wsapi.Store", {
                model: Ext.identityFn("Portfolio Item"),
                filters: [
                    {
                        property: "ObjectID",
                        operator: "=",
                        value: Rally.util.Ref.getOidFromRef(this.value)
                    }
                ],
                context: this.requestContext,
                autoLoad: true,
                listeners: {
                    load: this._onPortfolioItemRetrieved,
                    scope: this
                }
            });
        },

        _isSavedValueValid: function () {
            return typeof this.value === "string" && this.value !== "undefined";
        },

        _onPortfolioItemRetrieved: function (store) {
            var storeData = store.getAt(0);
            this._handleStoreResults(storeData);
        },

        _setDisplayValue: function () {
            this.down("#portfolioItemDisplay").setValue(this._getPortfolioItemDisplay());
        },

        _onButtonClick: function () {
            this._destroyChooser();

            this.dialog = Ext.create("Rally.ui.dialog.ChooserDialog", this.chooserConfig);
            this.dialog.show();
        },

        _destroyChooser: function () {
            if (this.dialog) {
                this.dialog.destroy();
            }
        },

        _getPortfolioItemDisplay: function () {
            return this.portfolioItem.FormattedID + ': ' + this.portfolioItem.Name;
        },

        _onPortfolioItemChosen: function (resultStore) {
            this._handleStoreResults(resultStore);
            this._destroyChooser();
        },

        _handleStoreResults: function(store) {
            if (store && store.data) {
                this.portfolioItem = store.data;
                this._setDisplayValue();
                this.setValue(this.portfolioItem._ref);
                this.sendSettingsChange(this.portfolioItem);
            }
        },

        _configureChooser: function () {
            this.chooserConfig = {
                artifactTypes: ['portfolioitem'],
                title: 'Choose a Portfolio Item',
                closeAction: 'destroy',
                selectionButtonText: 'Select',
                listeners: {
                    artifactChosen: this._onPortfolioItemChosen,
                    scope: this
                },
                storeConfig: {
                    project: null,
                    context: this.requestContext,
                    fetch: ['ObjectID','Project','WorkSpace','FormattedID','Name','ActualStartDate','PlannedStartDate','ActualEndDate','PlannedEndDate']
                },
                gridConfig: {
                    viewConfig: {
                        emptyText: Rally.ui.EmptyTextFactory.getEmptyTextFor(this.emptyText)
                    }
                }
            };
        },

        setValue: function (value) {
            if (value && value !== "undefined") {
                this.value = value;
            }
            else {
                this.value = this.settingsParent.app.getSetting("portfolioItemPicker");
            }
        },

        getSubmitData: function () {
            var returnObject = {};

            if (this.portfolioItem) {
                this.setValue(this.portfolioItem._ref);
                returnObject.portfolioItemPicker = this.portfolioItem._ref;
            }
            else {
                returnObject.portfolioItemPicker = "";
            }

            return returnObject;
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.rpm.ChartSettings", {

        requires: [
            "Rally.apps.charts.settings.PortfolioDatePicker",
            "Rally.apps.charts.settings.PortfolioItemDataTypePicker",
            "Rally.apps.charts.settings.PortfolioItemPicker"
        ],

        mixins: [
            "Rally.apps.charts.settings.SettingsChangeMixin"
        ],

        config: {
            app: undefined
        },

        constructor: function (config) {
            this.mergeConfig(config);
        },

        getSettingsConfiguration: function () {
            var self = this;

            var componentJoiner = function () {
                this.settingsParent = this.settingsParent || self;
                self.addChildComponent(this);
            };

            return [
                this._buildComponent("chartportfolioitempicker", componentJoiner),
                this._buildComponent("chartportfoliodatepicker", componentJoiner),
                this._buildComponent("chartportfoliodatatypepicker", componentJoiner)
            ];
        },

        _buildComponent: function (type, componentJoiner) {
            return {
                xtype: type,
                cls: "paddedSettingCmp",
                listeners: {
                    added: componentJoiner
                }
            };
        },

        sendSettingsChange: function (artifact, caller) {
            for (var i = 0; i < this.childComponents.length; i++) {
                var child = this.childComponents[i];
                if (child !== caller) {
                    child.receiveSettingsChange(artifact);
                }
            }
        },

        addChildComponent: function (component) {
            this.childComponents = this.childComponents || [];
            this.childComponents.push(component);
        }
    });
}());
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("Rally.apps.charts.rpm.PortfolioChartAppBase", {
        extend: "Rally.app.App",
        settingsScope: "workspace",
        logger: new Rally.technicalservices.Logger(),
    
        requires: [
            'Rally.apps.charts.rpm.ChartSettings',
            'Rally.ui.combobox.ComboBox',
            'Rally.util.Test',
            'Deft.Deferred'
        ],
    
        mixins: [
            'Rally.apps.charts.DateMixin'
        ],
    
        scheduleStates: ["Defined", "In-Progress", "Completed", "Accepted"],
    
        PI_SETTING: "portfolioItemPicker",
    
        items: [
            {
                xtype: 'container',
                itemId: 'header',
                cls: 'header'
            }
        ],
        integrationHeaders : {
            name : "Portfolio Chart"
        },
    
        getSettingsFields: function () {
            return this.chartSettings.getSettingsConfiguration();
        },
    
        clientMetrics: {
            beginEvent: 'updateBeforeRender',
            endEvent: 'updateAfterRender',
            description: 'pichartapp - elapsed chart load'
        },
    
        launch: function () {
            this._setupEvents();
    
            this._setupChartSettings();
    
            this._setDefaultConfigValues();
            this._setupUpdateBeforeRender();
    
            this._loadSavedPortfolioItem();
            Ext.create('Rally.apps.charts.IntegrationHeaders',this).applyTo(this.chartComponentConfig.storeConfig);
        },
    
        _setupChartSettings: function () {
            this.chartSettings = Ext.create("Rally.apps.charts.rpm.ChartSettings", {
                app: this
            });
        },
    
        _setupUpdateBeforeRender: function () {
            this.chartComponentConfig.updateBeforeRender = this._setupDynamicHooksWithEvents(
                this.chartComponentConfig.updateBeforeRender,
                'updateBeforeRender'
            );
    
            this.chartComponentConfig.updateAfterRender = this._setupDynamicHooksWithEvents(
                this.chartComponentConfig.updateAfterRender,
                'updateAfterRender'
            );
        },
    
        _setupDynamicHooksWithEvents: function (func, event) {
            var self = this;
    
            return function () {
                self.fireEvent(event);
                if ('function' === typeof func) {
                    func.apply(this);
                }
            };
        },
    
        _setupEvents: function () {
            this.addEvents(
                'updateBeforeRender',
                'updateAfterRender'
            );
        },
    
        _setDefaultConfigValues: function () {
            var config = Ext.clone(this.chartComponentConfig);
    
            config.storeConfig.find = config.storeConfig.find || {};
    
            config.calculatorConfig = config.calculatorConfig || {};
    
            config.chartConfig = config.chartConfig || {};
            config.chartConfig.title = config.chartConfig.title || {};
            config.chartConfig.xAxis = config.chartConfig.xAxis || {};
            config.chartConfig.xAxis.type = config.chartConfig.xAxis.type || "datetime";
            config.chartConfig.yAxis = config.chartConfig.yAxis || [
                {
                    title: {}
                }
            ];
    
            this.chartComponentConfig = config;
        },
    
    
        _loadSavedPortfolioItem: function () {
            if (!this._validateSettingsChoices()) {
                // force pop up the settings
                
                if ( this.isExternal() ) {
                    return;
                }
                return this.showSettings();
            }
    
            var portfolioItemRef = this.getSetting(this.PI_SETTING);
            var store = Ext.create("Rally.data.wsapi.Store", {
                model: Ext.identityFn("Portfolio Item"),
                filters: [
                    {
                        property: "ObjectID",
                        operator: "=",
                        value: Rally.util.Ref.getOidFromRef(portfolioItemRef)
                    }
                ],
                context: {
                    workspace: this.getContext().getWorkspaceRef(),
                    project: null
                },
                scope: this
            });
    
            store.on('load', this._onPortfolioItemRetrieved, this);
            store.load();
        },
    
        _validateSettingsChoices: function () {
            this.logger.log('_validateSettingsChoices');
            var piRef = this._getSettingPortfolioItem(),
                startDate = this._getSettingStartDate(),
                endDate = this._getSettingEndDate(),
                dataType = this.getSetting("chartAggregationType"),
                invalid = function (value) {
                    return !value || value === "undefined";
                };
    
            if (invalid(piRef) || invalid(startDate) || invalid(endDate) || invalid(dataType)) {
                return false;
            }
            return true;
        },
    
        /*
         * when running externally, the setting of arrays is sometimes stored as arrays
         * when running internally, the setting of arrays is sometimes stored as strings
         */
        _getSettingStartDate: function() {
            this.logger.log('startdate setting:', this.getSetting('startdate'));
            this.logger.log('settings:', this.getSettings());
            var start_date = this.getSetting("startdate") || this.getSetting("startDate");
            if ( Ext.isArray(start_date) ) {
                start_date = start_date.join(',');
            }
            return start_date;
        },
    
        _getSettingEndDate: function() {
            var end_date = this.getSetting("enddate") || this.getSetting("endDate");
            if ( Ext.isArray(end_date) ) {
                end_date = end_date.join(',');
            }
            return end_date;
        },
    
        _getSettingPortfolioItem: function() {
            var currentSetting = this.getSetting(this.PI_SETTING);
            if(currentSetting && currentSetting !== "undefined") {
                return currentSetting;
            }
    
            var previousSetting = this.getSetting("buttonchooser");
            if (previousSetting && previousSetting !== "undefined") {
                return Ext.JSON.decode(previousSetting).artifact._ref;
            }
    
            return "undefined";
        },
    
        _savedPortfolioItemValid: function (savedPi) {
            return !!(savedPi && savedPi._type && savedPi.ObjectID && savedPi.Name);
        },
    
        _onPortfolioItemRetrieved: function (store) {
            this.logger.log('_onPortfolioItemRetrieved', store);
            
            var storeData = store.getAt(0),
                portfolioItemRecord = storeData.data;
    
            if (!this._savedPortfolioItemValid(portfolioItemRecord)) {
                this._portfolioItemNotValid();
                return;
            }
    
            if (portfolioItemRecord) {
                Rally.data.ModelFactory.getModel({
                    type: 'UserStory',
                    success: function (model) {
                        this._onUserStoryModelRetrieved(model, portfolioItemRecord);
                    },
                    scope: this
                });
            } else {
                this._setErrorTextMessage("A server error occurred, please refresh the page.");
            }
        },
    
        _onUserStoryModelRetrieved: function (model, portfolioItem) {
            var scheduleStateValues = model.getField('ScheduleState').getAllowedStringValues();
            this.chartComponentConfig.calculatorConfig.scheduleStates = scheduleStateValues;
    
            this._setDynamicConfigValues(portfolioItem);
            this._calculateDateRange(portfolioItem);

            this._updateQueryConfig(portfolioItem);
    
            this.add(this.chartComponentConfig);
            //Rally.environment.getMessageBus().publish(Rally.Message.piChartAppReady);
        },
    
        _setDynamicConfigValues: function (portfolioItem) {
            this._updateChartConfigDateFormat();
            this.chartComponentConfig.chartConfig.title = this._buildChartTitle(portfolioItem);
            this.chartComponentConfig.chartConfig.subtitle = this._buildChartSubtitle(portfolioItem);
    
            this.chartComponentConfig.calculatorConfig.showTrend = this._getShowTrend(portfolioItem);
            
            this.chartComponentConfig.calculatorConfig.chartAggregationType = this._getAggregationType();
            this.chartComponentConfig.chartConfig.yAxis[0].title.text = this._getYAxisTitle();
    
            this.chartComponentConfig.chartConfig.yAxis[0].labels = {
                x: -5,
                y: 4
            };
        },
        
        _getShowTrend: function(portfolioItem) {
            return Ext.isEmpty(portfolioItem['ActualEndDate']);
        },
    
        _updateChartConfigDateFormat: function () {
            var self = this;
    
            this.chartComponentConfig.chartConfig.xAxis.labels = {
                x: 0,
                y: 20,
                formatter: function () {
                    return self._formatDate(self.dateStringToObject(this.value));
                }
            };
        },
    
        _parseRallyDateFormatToHighchartsDateFormat: function () {
            var dateFormat = this._getUserConfiguredDateFormat() || this._getWorkspaceConfiguredDateFormat();
    
            for (var i = 0; i < this.dateFormatters.length; i++) {
                dateFormat = dateFormat.replace(this.dateFormatters[i].key, this.dateFormatters[i].value);
            }
    
            return dateFormat;
        },
    
        _formatDate: function (date) {
            
            if (!this.dateFormat) {
                this.dateFormat = this._parseRallyDateFormatToHighchartsDateFormat();
            }
            
            return Highcharts.dateFormat(this.dateFormat, date.getTime());
        },
    
        _calculateDateRange: function (portfolioItem) {
            var calcConfig = this.chartComponentConfig.calculatorConfig;
            calcConfig.startDate = calcConfig.startDate || this._getChartStartDate(portfolioItem);
            calcConfig.endDate = calcConfig.endDate || this._getChartEndDate(portfolioItem);
            calcConfig.timeZone = calcConfig.timeZone || this._getTimeZone();
            calcConfig.PI = portfolioItem;
            this.chartComponentConfig.chartConfig.xAxis.tickInterval = this._configureChartTicks(calcConfig.startDate, calcConfig.endDate);
        },
    
        _updateQueryConfig: function (portfolioItem) {
            this.chartComponentConfig.storeConfig.find._ItemHierarchy = portfolioItem.ObjectID;
        },
    
        _configureChartTicks: function (startDate, endDate) {
            var pixelTickWidth = 125,
                appWidth = this.getWidth(),
                ticks = Math.floor(appWidth / pixelTickWidth);
    
            var startDateObj = this.dateStringToObject(startDate),
                endDateObj = this.dateStringToObject(endDate);
    
            var days = Math.floor((endDateObj.getTime() - startDateObj.getTime()) / 86400000);
    
            return Math.floor(days / ticks);
        },
    
        _getUserConfiguredDateFormat: function () {
            return this.getContext().getUser().UserProfile.DateFormat;
        },
    
        _getWorkspaceConfiguredDateFormat: function () {
            return this.getContext().getWorkspace().WorkspaceConfiguration.DateFormat;
        },
    
        _buildChartTitle: function (portfolioItem) {
            var widthPerCharacter = 10,
                totalCharacters = Math.floor(this.getWidth() / widthPerCharacter),
                title = "Portfolio Item Chart",
                align = "center";
    
            if (portfolioItem) {
                title = portfolioItem.FormattedID + ": " + portfolioItem.Name;
            }
    
            if (totalCharacters < title.length) {
                title = title.substring(0, totalCharacters) + "...";
                align = "left";
            }
    
            return {
                text: title,
                align: align,
                margin: 30
            };
        },
    
        _buildChartSubtitle: function (portfolioItem) {
            var widthPerCharacter = 6,
                totalCharacters = Math.floor(this.getWidth() / widthPerCharacter),
                plannedStartDate = "",
                plannedEndDate = "";
    
            var template = Ext.create("Ext.XTemplate",
                '<tpl if="plannedStartDate">' +
                    '<span>Planned Start: {plannedStartDate}</span>' +
                    '    <tpl if="plannedEndDate">' +
                    '        <tpl if="tooBig">' +
                    '            <br />' +
                    '        <tpl else>' +
                    '            &nbsp;&nbsp;&nbsp;' +
                    '        </tpl>' +
                    '    </tpl>' +
                    '</tpl>' +
                    '<tpl if="plannedEndDate">' +
                    '    <span>Planned End: {plannedEndDate}</span>' +
                    '</tpl>'
            );
    
            if (portfolioItem && portfolioItem.PlannedStartDate) {
                plannedStartDate = this._formatDate(portfolioItem.PlannedStartDate);
            }
    
            if (portfolioItem && portfolioItem.PlannedEndDate) {
                plannedEndDate = this._formatDate(portfolioItem.PlannedEndDate);
            }
    
            var formattedTitle = template.apply({
                plannedStartDate: plannedStartDate,
                plannedEndDate: plannedEndDate,
                tooBig: totalCharacters < plannedStartDate.length + plannedEndDate.length + 60
            });
    
            return {
                text: formattedTitle,
                useHTML: true,
                align: "center"
            };
        },
    
        _getAggregationType: function () {
            return this.getSetting("chartAggregationType");
        },
    
        _getYAxisTitle: function () {
            return this._getAggregationType() === "storypoints" ?
                "Points" :
                "Count";
        },
    
        _getChartStartDate: function (portfolioItem) {
            var startDateSetting = this._getSettingStartDate().split(","),
                settingValue = startDateSetting[0],
                startDate;
    
            if(startDateSetting[0] === "selecteddate") {
                startDate = this.dateStringToObject(startDateSetting[1]);
            } else {
                startDate = this._dateFromSettingValue(portfolioItem, settingValue);
            }
    
            return this.dateToString(startDate);
        },
    
        _getChartEndDate: function (portfolioItem) {
            var endDateSetting = this._getSettingEndDate().split(","),
                settingValue = endDateSetting[0],
                endDate;
    
            if (endDateSetting[0] === "selecteddate") {
                endDate = this.dateStringToObject(endDateSetting[1]);
            } else {
                endDate = this._dateFromSettingValue(portfolioItem, settingValue);
            }
    
            return this.dateToString(endDate);
        },
    
        _dateFromSettingValue: function (portfolioItem, settingValue) {
            var settingsMap = {
                "plannedstartdate": "PlannedStartDate",
                "plannedenddate": "PlannedEndDate",
                "actualstartdate": "ActualStartDate",
                "actualenddate": "ActualEndDate"
            };
    
            if (settingValue === "today") {
                return new Date();
            }
    
            if (settingsMap.hasOwnProperty(settingValue)) {
                return portfolioItem[settingsMap[settingValue]];
            }
    
            return new Date(settingValue);
        },
    
        _getTimeZone: function () {
            return this.getContext().getUser().UserProfile.TimeZone || this.getContext().getWorkspace().WorkspaceConfiguration.TimeZone;
        },
    
        _portfolioItemNotValid: function () {
            this._setErrorTextMessage('Cannot find the chosen portfolio item.  Please click the gear and "Edit Settings" to choose another.');
        },
    
        _setErrorTextMessage: function (message) {
            this.down('#header').add({
                xtype: 'displayfield',
                value: message
            });
        }
    });

}());

Ext.define("Rally.apps.charts.rpm.burn.BurnCalculator", {
    extend: "Rally.data.lookback.calculator.TimeSeriesCalculator",

    config: {
        /**
         * @cfg {Boolean} hideBarsAfterToday
         * True to not display the completion bars on the chart if it extends beyond
         * the day that the app is run.  Defaults to false (show all bars flattened
         * to the right of today).
         */
        hideBarsAfterToday: false,
        /**
         * 
         * @type { Object } PI
         * The portfolio item the chart is based on.  ( Passed in as an object (record.getData()).
         * Used for planned end date calcs.)
         * 
         */
        PI: null,
        /**
         * 
         * @cfg {Boolean} showTrend
         * Pass true to show a trend line from the PI's actual start through the value 
         * of today and intersecting the scope line.  
         * 
         * For the trend line to show:
         * * This must be true
         * * There must be at least two completed values
         * * There must not be an actual end date
         * * Today must be on the chart
         */
        showTrend: false,
        
        plotLines: []
    },

    getDerivedFieldsOnInput: function () {
        var completedStateNames = this.config.completedScheduleStateNames;

        if (this.config.chartAggregationType === 'storycount') {
            return [
                {
                    "as": "StoryCount",
                    "f": function(snapshot) {
                        return 1;
                    }
                },
                {
                    "as": "CompletedStoryCount",
                    "f": function(snapshot) {
                        var ss = snapshot.ScheduleState;
                        if (completedStateNames.indexOf(ss) > -1) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }
                }
            ];
        }
        else {
            return [
                {
                    "as": "Planned",
                    "f": function(snapshot) {
                        if(snapshot.PlanEstimate) {
                            return snapshot.PlanEstimate;
                        }

                        return 0;
                    }
                },
                {
                    "as": "PlannedCompleted",
                    "f": function(snapshot) {
                        var ss = snapshot.ScheduleState;
                        if(completedStateNames.indexOf(ss) > -1 && snapshot.PlanEstimate) {
                            return snapshot.PlanEstimate;
                        }

                        return 0;
                    }
                }
            ];
        }
    },

    getMetrics: function() {
        if(this.config.chartAggregationType === 'storycount') {
            return [
                {
                    "field": "StoryCount",
                    "as": "Planned",
                    "f": "sum",
                    "display": "line"
                },
                {
                    "field": "CompletedStoryCount",
                    "as": "Completed",
                    "f": "sum",
                    "display": "column"
                }
            ];
        }
        else {
            return [
                {
                    "field": "Planned",
                    "as": "Planned",
                    "display": "line",
                    "f": "sum"
                },
                {
                    "field": "PlannedCompleted",
                    "as": "Completed",
                    "f": "sum",
                    "display": "column"
                }
            ];
        }
    },

    runCalculation: function (snapshots, snapshotsToSubtract) {
        var highcharts_data = this.callParent(arguments);
        
        if ( this.hideBarsAfterToday ) {
            highcharts_data = this._stripFutureBars(highcharts_data);
        }
        
        if ( this.showTrend ) {
            highcharts_data = this._addTrend(highcharts_data);
        }
        
        this._addPlotlines(highcharts_data);
        
        console.log("Data:", highcharts_data);
        
        return highcharts_data;
    },
    
    _getDateIndexFromDate: function(highcharts_data, check_date) {
        var date_iso = Rally.util.DateTime.toIsoString(new Date(check_date),true).replace(/T.*$/,'');
        var date_index = -1;
        
        console.log("Checking date:", check_date, date_iso);
        
        Ext.Array.each(highcharts_data.categories, function(category,idx) {
            
            if (category >= date_iso && date_index == -1 ) {
                date_index = idx;
            }
        });
        
        if ( date_index === 0 ) {
            return date_index = -1;
        }
        return date_index;
    },
    
    _addPlotlines: function(data) {
        
        this.plotLines = [];
        
        var today_index = this._getDateIndexFromDate(data,new Date());
        if ( today_index > -1 ) {
            this.plotLines.push({
                color: '#000',
                label: { text: 'today' },
                width: 2,
                value: today_index
            });
        }
        
        if ( this.PI && this.PI.PlannedEndDate) {
            var end_date_index = this._getDateIndexFromDate(data, this.PI.PlannedEndDate);
            console.log('today index:', today_index);
            console.log('planned end index:', end_date_index);
            
            if ( end_date_index > -1 ) {
                
                this.plotLines.push({
                    color: '#000',
                    label: { text: 'planned end' },
                    width: 2,
                    value: end_date_index
                });
            }
        }
    },
    
    _stripFutureBars: function(data) {
        var today_index = this._getDateIndexFromDate(data,new Date());
        
        if ( today_index > -1 ) {
            Ext.Array.each(data.series, function(series) {
                if ( series.name == "Completed" ) {
                    Ext.Array.each( series.data, function(datum,idx){
                        if ( idx > today_index ) {
                            series.data[idx] = null;
                        }
                    });
                }
            });
        }
        
        return data;
    },
    
    _getIndexOfFirstNonzeroFromArray:function(data) {
        var index = -1;
        Ext.Array.each(data,function(datum,idx){
            if ( datum > 0 && index == -1 ) {
                index = idx;
            }
        });
        return index;
    },
    
    _addTrend: function(data) {
        if ( Ext.isEmpty(this.PI) ) {
            return data;
        }
        
        var completed_series = [];
        var scope_series = [];
        
        Ext.Array.each( data.series, function(s) {
            if ( s.name == "Completed" ) {
                completed_series = s;
            }
            if ( s.name == "Planned" ) {
                scope_series = s;
            }
        });
        
        var index_of_first_accepted = -1;
        // is there an actual value today?  
        var index_of_today = this._getDateIndexFromDate(data,new Date());
        if ( index_of_today <= 0 ) {
            // need at least two days of data
            console.log("Cannot show trend because the chart needs to start before today");
            return data;
        }
        
        var index_of_first_nonzero = this._getIndexOfFirstNonzeroFromArray(completed_series.data);
        console.log('indexes (start,today):', index_of_first_nonzero, index_of_today);

        var today_actual = completed_series.data[index_of_today];
        var first_actual = completed_series.data[index_of_first_nonzero];

        if ( today_actual <= first_actual ) {
            console.log("There's no slope to show because current actual is less than or equal to first actual");
            return data;
        }
        
        var slope =  ( today_actual - first_actual ) / ( index_of_today - index_of_first_nonzero ) ;
        
        var scope = scope_series.data[index_of_today];
        
        var calculation_date_limit = Rally.util.DateTime.add(new Date(), 'year', 2);
        var trend_date = new Date();
        var trend_value = today_actual;
        
        console.log("Slope:", slope);
        console.log("Scope:", scope);
        
        while ( trend_date < calculation_date_limit && trend_value <= scope ) {
            trend_date = Rally.util.DateTime.add(trend_date,'day',1);
            trend_date = this._shiftOffWeekend(trend_date);
            trend_value = trend_value + slope;
            console.log('--', trend_date, trend_value);
        }
        
        data = this._setTrendLineSeries(data, index_of_first_nonzero, first_actual, trend_date, scope);
        
        return data;
    },
    
    _shiftOffWeekend: function(check_date) {
        if (check_date.getDay() == 6) {check_date = Rally.util.DateTime.add(check_date,'day',1);} // Saturday
        if (check_date.getDay() == 0) {check_date = Rally.util.DateTime.add(check_date,'day',1);} // Sunday
        
        return check_date;
    },
    
    _setTrendLineSeries: function(data, index_of_first_nonzero, first_actual, end_date, end_value) {
        console.log('_setTrendLineSeries', index_of_first_nonzero, first_actual, end_date, end_value);
        
        var end_date_iso = Rally.util.DateTime.toIsoString(end_date).replace(/T.*$/,'');
        var current_chart_end = data.categories[ data.categories.length - 1];
        
        if ( current_chart_end < end_date_iso ) {
            data = this._padDates(data, current_chart_end, end_date);
        }
        
        var index_of_end = this._getDateIndexFromDate(data,end_date);
        var trend_data = [];
        
        for ( var i=0; i<data.categories.length; i++) {
            if ( i==index_of_end ) { 
                trend_data.push(end_value); 
            } else if ( i==index_of_first_nonzero ) { 
                trend_data.push(first_actual); 
            } else {
                trend_data.push(null);
            }
        }
        data.series.push({
            dashStyle: 'Solid',
            data: trend_data,
            name: 'Trend',
            type: 'line',
            connectNulls: true
        });
        return data;
        
    },
    
    _padDates: function(data,current_end,new_end_date) {
        var count_beyond_current = 0;
        var next_day = Rally.util.DateTime.fromIsoString(current_end);
        
        console.log("Adding days from", next_day, " to ", new_end_date);
        
        while ( next_day < new_end_date ) {            
            next_day = Rally.util.DateTime.add(next_day, 'day', 1);
            next_day = this._shiftOffWeekend(next_day);
            var next_day_iso = Rally.util.DateTime.toIsoString(next_day).replace(/T.*$/,'');
            
            if ( next_day_iso != current_end ) {
                data.categories.push(next_day_iso);
                count_beyond_current++;
            }
        }
        
        var completed_series = [];
        var scope_series = [];
        
        Ext.Array.each( data.series, function(s) {
            if ( s.name == "Completed" ) {
                completed_series = s;
            }
            if ( s.name == "Planned" ) {
                scope_series = s;
            }
        });
        
        var scope = scope_series.data[scope_series.data.length-1];
        for ( var i=0; i<count_beyond_current; i++ ) {
            scope_series.data.push(scope);
            completed_series.data.push(null);
        }
        
        data.series = [scope_series, completed_series];
        return data;
        
    }
        
});
var palette = Ext.create("Rally.apps.charts.Colors");

Ext.define("TSPIBurnupWithTrend", {
    extend: "Rally.apps.charts.rpm.PortfolioChartAppBase",
    cls: "portfolio-burnup-app",
    

    requires: [
        'Rally.ui.chart.Chart',
        'Rally.apps.charts.Colors',
        'Rally.apps.charts.IntegrationHeaders'
    ],

    integrationHeaders : {
        name : "TS Portfolio Item Burnup with Trend"
    },

    chartComponentConfig: {
        xtype: "rallychart",

        updateBeforeRender: function() {
            var length = this.calculatorConfig.scheduleStates.length,
                state = this.calculatorConfig.scheduleStates[length - 1];
            if(state !== "Accepted") {
                this.calculatorConfig.completedScheduleStateNames.push(state);
            }
            
        },
        
        listeners: {
            snapshotsAggregated: function(c) {
                c.chartConfig.xAxis.plotLines = c.calculator.plotLines;
            }
        },

        queryErrorMessage: "No data to display.<br /><br />Most likely, stories are either not yet available or started for this portfolio item.",
        aggregationErrorMessage: "No data to display.<br /><br />Check the data type setting for displaying data based on count versus plan estimate.",

        storeType: 'Rally.data.lookback.SnapshotStore',
        storeConfig: {
            find: {
                "_TypeHierarchy": -51038,
                "Children": null
            },
            fetch: ["ScheduleState", "PlanEstimate"],
            hydrate: ["ScheduleState"],
            sort: {
                "_ValidFrom": 1
            }
        },

        calculatorType: "Rally.apps.charts.rpm.burn.BurnCalculator",
        calculatorConfig: {
            workDays: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"],
            timeZone: "GMT",
            completedScheduleStateNames: ["Accepted"],
            hideBarsAfterToday: true,
            showTrend: true
        },

        chartColors: [], // reset so we can define our own palette

        chartConfig: {
            chart: {
                defaultSeriesType: "area",
                zoomType: "xy"
            },
            xAxis: {
                categories: [],
                tickmarkPlacement: "on",
                tickInterval: 5,
                title: {
                    text: "Days",
                    margin: 10
                }
            },
            yAxis: [
                {
                    title: {
                        text: "Count"
                    }
                }
            ],
            tooltip: {
                formatter: function () {
                    return "" + this.x + "<br />" + this.series.name + ": " + this.y;
                }
            },
            plotOptions: {
                series: {
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true
                            }
                        }
                    },
                    groupPadding: 0.01
                },
                line: {
                    color: palette.burnLineColor()
                },
                column: {
                    stacking: null,
                    color: palette.burnColumnColor(),
                    shadow: false
                }
            }
        }
    },
    
    _getRallyDateFormat: function () {
        var dateFormat = this._getUserConfiguredDateFormat() || this._getWorkspaceConfiguredDateFormat();

        for (var i = 0; i < this.dateFormatters.length; i++) {
            dateFormat = dateFormat.replace(this.dateFormatters[i].key, this.dateFormatters[i].value);
        }

        return dateFormat;
    },

    _formatDate: function (date) {
        
        if (!this.dateFormat) {
            this.dateFormat = this._getRallyDateFormat();
        }

        return Ext.Date.format(date, this.dateFormat);
    },
        
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        if ( this.down('rallychart') ) { this.down('rallychart').destroy(); }
        this.launch();
    }
});


            
               Rally.launchApp('TSPIBurnupWithTrend', {
                   name: 'Portfolio Item Burnup With Trend'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>